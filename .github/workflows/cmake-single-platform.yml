# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive
    # - name: Update linux packages
    #   run: |
    #     sudo apt update
    #     sudo apt install build-essential cmake ninja-build
      
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.1'
        arch: 'gcc_64'
        tools: 'tools_cmake tools_ninja'
    - name: Print 
      run: |
        cd /home/runner/work/figurer/Qt
        pwd
        ls
    - name: Setup xvfb
      run: Xvfb :1 -screen 0 1600x1200x24 &
    - name: 'Threeal: Configure, build, test'
      uses:  threeal/cmake-action@v1.3.0
      env:
        DISPLAY: :1
      with:
        run-build: true
        run-test: true
        source-dir: figurer-project
        build-dir: build
        generator: Ninja
        cxx-compiler: g++
        options: CMAKE_PREFIX_PATH=${QT_ROOT_DIR}
    - name: Teardown xvfb
      run: killall Xvfb
    # - name: Configure CMake
    #   working-directory: ./figurer-project
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: cmake -B ${{github.workspace}}/build -G "Ninja" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    # - name: cmake help
    #   working-directory: ./figurer-project
    #   run: cmake --help
    # - name: Build
    #   working-directory: ./figurer-project
    #   # Build your program with the given configuration
    #   run: cmake -DCMAKE_CXX_FLAGS="-std=c++17" --build ${{github.workspace}}/build

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

